{"version":3,"sources":["Components/Header.tsx","api.ts","utils.ts","Routes/Home.tsx","Routes/Search.tsx","Routes/TvShow.tsx","App.tsx","index.tsx","theme.ts"],"names":["Nav","styled","motion","nav","_templateObject","_taggedTemplateLiteral","Col","div","_templateObject2","Logo","svg","_templateObject3","props","theme","red","Items","ul","_templateObject4","Item","li","_templateObject5","white","darker","lighter","Search","form","_templateObject6","Circle","span","_templateObject7","Input","input","_templateObject8","logoVariants","normal","fillOpacity","active","transition","repeat","Infinity","navVariants","top","backgroundColor","scroll","Header","_useState","useState","_useState2","_slicedToArray","searchOpen","setSearchOpen","homeMatch","useRouteMatch","tvMatch","inputAnimation","useAnimation","navAnimation","scrollY","useViewportScroll","useEffect","onChange","get","start","history","useHistory","_useForm","useForm","register","handleSubmit","_jsxs","variants","animate","initial","children","_jsx","whileHover","xmlns","width","height","viewBox","path","d","Link","to","isExact","layoutId","onSubmit","data","push","concat","keyword","onClick","scaleX","prev","x","type","fill","fillRule","clipRule","_objectSpread","required","minLength","placeholder","API_KEY","BASE_PATH","getMovies","fetch","then","response","json","getLatestMovies","getTopRatedMovies","getUpcomingMovies","getAiringTodayTvShows","getPopularTvShows","getTopRatedTvShows","searchMovies","searchTvShows","makeImagePath","id","format","Wrapper","Loader","Banner","bgPhoto","Title","h2","Overview","p","Slider","SliderTitle","h3","Row","Box","_templateObject9","Info","_templateObject10","black","rowVariants","hidden","window","outerWidth","visible","exit","boxVariants","scale","hover","y","delay","duaration","infoVariants","opacity","Overlay","_templateObject11","BigMovie","_templateObject12","BigCover","_templateObject13","BigTitle","_templateObject14","BigOverview","_templateObject15","Home","bigMovieMatch","index","setIndex","_useState3","_useState4","leaving","setLeaving","toggleLeaving","onBoxClicked","movieId","_useMultipleQuery","useQuery","_useMultipleQuery2","_useMultipleQuery2$","nowPlayingData","nowPlayingLoading","isLoading","_useMultipleQuery2$2","latestLoading","_useMultipleQuery2$3","topRatedData","topRatedLoading","_useMultipleQuery2$4","upCommingData","upCommingLoading","clickedMovie","params","results","find","movie","_Fragment","totalMovies","length","maxIndex","Math","floor","backdrop_path","title","overview","AnimatePresence","onExitComplete","duration","slice","map","style","backgroundImage","ResultList","ResultItem","ResultImage","img","ResultTitle","h4","ResultReleaseDate","ResultOverview","location","useLocation","URLSearchParams","search","movieSearchResult","setMovieSearchResult","fetchSearchResult","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","movieResult","wrap","_context","next","sent","stop","apply","arguments","tvSearchResult","setTvSearchResult","_ref2","_callee2","tvResult","_context2","src","poster_path","alt","tv","name","BigTv","TVShow","bigTVMatch","tvId","popularData","popularLoading","airingTodayData","airingTodayLoading","clickedTV","totalTVs","App","Router","Switch","Route","TvShow","GlobalStyle","createGlobalStyle","client","QueryClient","ReactDOM","render","React","StrictMode","RecoilRoot","QueryClientProvider","ThemeProvider","veryDark","document","getElementById"],"mappings":"0RAMMA,EAAMC,YAAOC,IAAOC,IAAdF,CAAkBG,MAAAC,YAAA,kMAYxBC,EAAML,IAAOM,IAAGC,MAAAH,YAAA,oDAKhBI,EAAOR,YAAOC,IAAOQ,IAAdT,CAAkBU,MAAAN,YAAA,2IAIrB,SAACO,GAAK,OAAKA,EAAMC,MAAMC,GAAG,IAO9BC,EAAQd,IAAOe,GAAEC,MAAAZ,YAAA,oDAKjBa,EAAOjB,IAAOkB,GAAEC,MAAAf,YAAA,0NAEX,SAACO,GAAK,OAAKA,EAAMC,MAAMQ,MAAMC,MAAM,IAOjC,SAACV,GAAK,OAAKA,EAAMC,MAAMQ,MAAME,OAAO,IAI3CC,EAASvB,IAAOwB,KAAIC,MAAArB,YAAA,6HAUpBsB,EAAS1B,YAAOC,IAAO0B,KAAd3B,CAAmB4B,MAAAxB,YAAA,gLASZ,SAACO,GAAK,OAAKA,EAAMC,MAAMC,GAAG,IAG1CgB,EAAQ7B,YAAOC,IAAO6B,MAAd9B,CAAoB+B,MAAA3B,YAAA,iPAUZ,SAACO,GAAK,OAAKA,EAAMC,MAAMQ,MAAME,OAAO,IAGpDU,EAAe,CACnBC,OAAQ,CACNC,YAAa,GAEfC,OAAQ,CACND,YAAa,CAAC,EAAG,EAAG,GACpBE,WAAY,CACVC,OAAQC,OAKRC,EAAc,CAClBC,IAAK,CACHC,gBAAiB,oBAEnBC,OAAQ,CACND,gBAAiB,qBA+FNE,MAvFf,WACE,IAAAC,EAAoCC,oBAAS,GAAMC,EAAAC,YAAAH,EAAA,GAA5CI,EAAUF,EAAA,GAAEG,EAAaH,EAAA,GAC1BI,EAAYC,YAAc,KAC1BC,EAAUD,YAAc,OACxBE,EAAiBC,cACjBC,EAAeD,cACbE,EAAYC,cAAZD,QAWRE,qBAAU,WACRF,EAAQG,UAAS,WACXH,EAAQI,MAAQ,GAClBL,EAAaM,MAAM,UAEnBN,EAAaM,MAAM,MAEvB,GACF,GAAG,CAACL,EAASD,IACb,IAAMO,EAAUC,cAChBC,EAAmCC,cAA3BC,EAAQF,EAARE,SAAUC,EAAYH,EAAZG,aAIlB,OACEC,eAACrE,EAAG,CAACsE,SAAU9B,EAAa+B,QAASf,EAAcgB,QAAS,MAAMC,SAAA,CAChEJ,eAAC/D,EAAG,CAAAmE,SAAA,CACFC,cAACjE,EAAI,CACH6D,SAAUrC,EACV0C,WAAW,SACXJ,QAAQ,SACRK,MAAM,6BACNC,MAAM,OACNC,OAAO,UACPC,QAAQ,mBAAkBN,SAE1BC,cAACxE,IAAO8E,KAAI,CAACC,EAAE,m+BAEjBZ,eAACtD,EAAK,CAAA0D,SAAA,CACJC,cAACxD,EAAI,CAAAuD,SACHJ,eAACa,IAAI,CAACC,GAAG,IAAGV,SAAA,CAAC,SACI,OAATtB,QAAS,IAATA,OAAS,EAATA,EAAWiC,UAAWV,cAAC/C,EAAM,CAAC0D,SAAS,gBAGjDX,cAACxD,EAAI,CAAAuD,SACHJ,eAACa,IAAI,CAACC,GAAG,MAAKV,SAAA,CAAC,YACHpB,GAAWqB,cAAC/C,EAAM,CAAC0D,SAAS,sBAK9CX,cAACpE,EAAG,CAAAmE,SACFJ,eAAC7C,EAAM,CAAC8D,SAAUlB,GA/BR,SAACmB,GACfxB,EAAQyB,KAAK,mBAADC,OAAoBF,EAAKG,SACvC,IA6B8CjB,SAAA,CACtCC,cAACxE,IAAOQ,IAAG,CACTiF,QAtDW,WACf1C,EACFK,EAAeQ,MAAM,CACnB8B,OAAQ,IAGVtC,EAAeQ,MAAM,CAAE8B,OAAQ,IAEjC1C,GAAc,SAAC2C,GAAI,OAAMA,CAAI,GAC/B,EA8CUtB,QAAS,CAAEuB,EAAG7C,GAAc,IAAM,GAClCZ,WAAY,CAAE0D,KAAM,UACpBC,KAAK,eACLjB,QAAQ,YACRH,MAAM,6BAA4BH,SAElCC,cAAA,QACEuB,SAAS,UACThB,EAAE,mHACFiB,SAAS,cAGbxB,cAAC5C,EAAKqE,wBAAA,GACAhC,EAAS,UAAW,CAAEiC,UAAU,EAAMC,UAAW,KAAI,IACzD9B,QAASjB,EACTkB,QAAS,CAAEoB,OAAQ,GACnBvD,WAAY,CAAE0D,KAAM,UACpBO,YAAY,2CAMxB,E,iBCrMMC,EAAU,mCACVC,EAAY,+BAwCX,SAASC,IACZ,OAAOC,MAAM,GAADjB,OAAIe,EAAS,+BAAAf,OAA8Bc,IAAWI,MAC9D,SAACC,GAAQ,OAAKA,EAASC,MAAM,GAErC,CACO,I,kCAAMC,GAAkB,WAC3B,OAAOJ,MAAM,GAADjB,OAAIe,EAAS,0BAAAf,OAAyBc,IAAWI,MACzD,SAACC,GAAQ,OAAKA,EAASC,MAAM,GAErC,EAEaE,GAAoB,WAC7B,OAAOL,MAAM,GAADjB,OAAIe,EAAS,6BAAAf,OAA4Bc,IAAWI,MAC5D,SAACC,GAAQ,OAAKA,EAASC,MAAM,GAErC,EAEaG,GAAoB,WAC7B,OAAON,MAAM,GAADjB,OAAIe,EAAS,4BAAAf,OAA2Bc,IAAWI,MAC3D,SAACC,GAAQ,OAAKA,EAASC,MAAM,GAErC,EAQaI,GAAwB,WACjC,OAAOP,MAAM,GAADjB,OAAIe,EAAS,6BAAAf,OAA4Bc,IAAWI,MAC5D,SAACC,GAAQ,OAAKA,EAASC,MAAM,GAErC,EAEaK,GAAoB,WAC7B,OAAOR,MAAM,GAADjB,OAAIe,EAAS,wBAAAf,OAAuBc,IAAWI,MACvD,SAACC,GAAQ,OAAKA,EAASC,MAAM,GAErC,EAEaM,GAAqB,WAC9B,OAAOT,MAAM,GAADjB,OAAIe,EAAS,0BAAAf,OAAyBc,IAAWI,MACzD,SAACC,GAAQ,OAAKA,EAASC,MAAM,GAErC,EAEaO,GAAe,SAAC1B,GACzB,OAAOgB,MAAM,GAADjB,OACLe,EAAS,0BAAAf,OAAyBc,EAAO,WAAAd,OAAUC,IACxDiB,MAAK,SAACC,GAAQ,OAAKA,EAASC,MAAM,GACxC,EAEaQ,GAAgB,SAAC3B,GAC1B,OAAOgB,MAAM,GAADjB,OACLe,EAAS,uBAAAf,OAAsBc,EAAO,WAAAd,OAAUC,IACrDiB,MAAK,SAACC,GAAQ,OAAKA,EAASC,MAAM,GACxC,EClGO,SAASS,GAAcC,EAAYC,GACxC,MAAM,8BAAN/B,OAAqC+B,GAAkB,WAAU,KAAA/B,OAAI8B,EACvE,CCYA,IAAME,GAAUxH,IAAOM,IAAGH,MAAAC,YAAA,8DAKpBqH,GAASzH,IAAOM,IAAGC,MAAAH,YAAA,yGAOnBsH,GAAS1H,IAAOM,IAAGI,MAAAN,YAAA,6PAOX,SAACO,GAAK,OAAKA,EAAMgH,OAAO,IAIhCC,GAAQ5H,IAAO6H,GAAE7G,MAAAZ,YAAA,4DAKjB0H,GAAW9H,IAAO+H,EAAC5G,MAAAf,YAAA,iDAKnB4H,GAAShI,IAAOM,IAAGmB,MAAArB,YAAA,mCAInB6H,GAAcjI,IAAOkI,GAAEtG,MAAAxB,YAAA,0DAIvB+H,GAAMnI,YAAOC,IAAOK,IAAdN,CAAkB+B,MAAA3B,YAAA,2GAOxBgI,GAAMpI,YAAOC,IAAOK,IAAdN,CAAkBqI,MAAAjI,YAAA,uVAEF,SAACO,GAAK,OAAKA,EAAMgH,OAAO,IAc9CW,GAAOtI,YAAOC,IAAOK,IAAdN,CAAkBuI,MAAAnI,YAAA,8MAEP,SAACO,GAAK,OAAKA,EAAMC,MAAM4H,MAAMlH,OAAO,IAWtDmH,GAAc,CAChBC,OAAQ,CACJ7C,EAAG8C,OAAOC,WAAa,GAE3BC,QAAS,CACLhD,EAAG,GAEPiD,KAAM,CACFjD,GAAI8C,OAAOC,WAAa,IAI1BG,GAAc,CAChB9G,OAAQ,CACJ+G,MAAO,GAEXC,MAAO,CACHD,MAAO,IACPE,GAAI,GACJ9G,WAAY,CACR+G,MAAO,GACPC,UAAW,GACXtD,KAAM,WAKZuD,GAAe,CACjBJ,MAAO,CACHK,QAAS,EACTlH,WAAY,CACR+G,MAAO,GACPC,UAAW,GACXtD,KAAM,WAIZyD,GAAUvJ,YAAOC,IAAOK,IAAdN,CAAkBwJ,MAAApJ,YAAA,8IAS5BqJ,GAAWzJ,YAAOC,IAAOK,IAAdN,CAAkB0J,QAAAtJ,YAAA,uMASX,SAACO,GAAK,OAAKA,EAAMC,MAAM4H,MAAMlH,OAAO,IAGtDqI,GAAW3J,IAAOM,IAAGsJ,QAAAxJ,YAAA,sHAOrByJ,GAAW7J,IAAOkI,GAAE4B,QAAA1J,YAAA,+GACb,SAACO,GAAK,OAAKA,EAAMC,MAAMQ,MAAME,OAAO,IAO3CyI,GAAc/J,IAAO+H,EAACiC,QAAA5J,YAAA,yFAIf,SAACO,GAAK,OAAKA,EAAMC,MAAMQ,MAAME,OAAO,IA4NlC2I,I,wBAAAA,GAzNf,WACI,IAAMnG,EAAUC,cACVmG,EAAgB/G,YAClB,oBAEJP,EAA0BC,mBAAS,GAAEC,EAAAC,YAAAH,EAAA,GAA9BuH,EAAKrH,EAAA,GAAEsH,EAAQtH,EAAA,GACtBuH,EAA8BxH,oBAAS,GAAMyH,EAAAvH,YAAAsH,EAAA,GAAtCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAEpBG,EAAgB,WAAH,OAASD,GAAW,SAAC5E,GAAI,OAAMA,CAAI,GAAE,EAClD8E,EAAe,SAACC,GAClB7G,EAAQyB,KAAK,WAADC,OAAYmF,GAC5B,EAGQnH,EAAYC,cAAZD,QAoBRoH,EAFW,CAhBYC,mBACf,CAAC,SAAU,cACXrE,GAEWqE,mBACX,CAAC,SAAU,UACXhE,IAEagE,mBACb,CAAC,SAAU,YACX/D,IAEc+D,mBACd,CAAC,SAAU,aACX9D,KASc+D,EAAA/H,YAAA6H,EAAA,GAAAG,EAAAD,EAAA,GAJVE,EAAcD,EAApBzF,KAAiC2F,EAAiBF,EAA5BG,UAASC,EAAAL,EAAA,GACFM,GAAbD,EAAhB7F,KAA0C6F,EAAxBD,WAASG,EAAAP,EAAA,GACrBQ,EAAYD,EAAlB/F,KAA+BiG,EAAeF,EAA1BH,UAASM,EAAAV,EAAA,GACvBW,EAAaD,EAAnBlG,KAAgCoG,EAAgBF,EAA3BN,UAYrBS,GACW,OAAbzB,QAAa,IAAbA,OAAa,EAAbA,EAAe0B,OAAOjB,WACR,OAAdK,QAAc,IAAdA,OAAc,EAAdA,EAAgBa,QAAQC,MACpB,SAACC,GAAK,OAAKA,EAAMzE,MAAQ4C,EAAc0B,OAAOjB,OAAO,KAE7D,OACIlG,cAAC+C,GAAO,CAAAhD,SACHyG,GACDG,GACAG,GACAG,EACIjH,cAACgD,GAAM,CAAAjD,SAAC,eAERJ,eAAA4H,WAAA,CAAAxH,SAAA,CACIJ,eAACsD,GAAM,CACHhC,QAxBC,WACjB,GAAIsF,EAAgB,CAChB,GAAIT,EAAS,OACbE,IACA,IAAMwB,EAAcjB,EAAea,QAAQK,OAAS,EAC9CC,EAAWC,KAAKC,MAAMJ,EA/CzB,GA+CiD,EACpD7B,GAAS,SAACxE,GAAI,OAAMA,IAASuG,EAAW,EAAIvG,EAAO,CAAC,GACxD,CACJ,EAiBoB+B,QAASN,IACS,OAAd2D,QAAc,IAAdA,OAAc,EAAdA,EAAgBa,QAAQ,GAAGS,gBAAiB,IAC9C9H,SAAA,CAEFC,cAACmD,GAAK,CAAApD,SAAgB,OAAdwG,QAAc,IAAdA,OAAc,EAAdA,EAAgBa,QAAQ,GAAGU,QACnC9H,cAACqD,GAAQ,CAAAtD,SACU,OAAdwG,QAAc,IAAdA,OAAc,EAAdA,EAAgBa,QAAQ,GAAGW,cAGpC/H,cAACuD,GAAM,CAAAxD,SACHJ,eAACqI,IAAe,CACZlI,SAAS,EACTmI,eAAgBjC,EAAcjG,SAAA,CAE9BC,cAACwD,GAAW,CAAAzD,SAAC,gBACbC,cAAC0D,GAAG,CACA9D,SAAUoE,GACVlE,QAAQ,SACRD,QAAQ,UACRwE,KAAK,OACL1G,WAAY,CAAE0D,KAAM,QAAS6G,SAAU,GAAInI,SAG5B,OAAdwG,QAAc,IAAdA,OAAc,EAAdA,EAAgBa,QACZe,MAAM,GACNA,MA5FtB,EA6FkCzC,EA7FlC,EA8FkCA,EA9FlC,GAgGsB0C,KAAI,SAACd,GAAK,OACPtH,cAAC2D,GAAG,CACAhD,SAAU2G,EAAMzE,GAAK,GAErB5C,WAAW,QACXH,QAAQ,SACRF,SAAU0E,GACVrD,QAAS,kBACLgF,EAAaqB,EAAMzE,GAAG,EAE1BlF,WAAY,CAAE0D,KAAM,SACpB6B,QAASN,GACL0E,EAAMO,cACN,QACF9H,SAEFC,cAAC6D,GAAI,CAACjE,SAAUgF,GAAa7E,SACzBC,cAAA,MAAAD,SAAKuH,EAAMQ,WAdVR,EAAMzE,GAgBT,KA3BT6C,GA8BT1F,cAACwD,GAAW,CAAAzD,SAAC,cACbC,cAAC0D,GAAG,CACA9D,SAAUoE,GACVlE,QAAQ,SACRD,QAAQ,UACRwE,KAAK,OACL1G,WAAY,CAAE0D,KAAM,QAAS6G,SAAU,GAAInI,SAG9B,OAAZ8G,QAAY,IAAZA,OAAY,EAAZA,EAAcO,QAAQgB,KAAI,SAACd,GAAK,OAC7BtH,cAAC2D,GAAG,CACAhD,SAAU2G,EAAMzE,GAAK,GAErB5C,WAAW,QACXH,QAAQ,SACRF,SAAU0E,GACVrD,QAAS,kBAAMgF,EAAaqB,EAAMzE,GAAG,EACrClF,WAAY,CAAE0D,KAAM,SACpB6B,QAASN,GACL0E,EAAMO,cACN,QACF9H,SAEFC,cAAC6D,GAAI,CAACjE,SAAUgF,GAAa7E,SACzBC,cAAA,MAAAD,SAAKuH,EAAMQ,WAZVR,EAAMzE,GAcT,KAnBL6C,GAsBT1F,cAACwD,GAAW,CAAAzD,SAAC,eACbC,cAAC0D,GAAG,CACA9D,SAAUoE,GACVlE,QAAQ,SACRD,QAAQ,UACRwE,KAAK,OACL1G,WAAY,CAAE0D,KAAM,QAAS6G,SAAU,GAAInI,SAG7B,OAAbiH,QAAa,IAAbA,OAAa,EAAbA,EAAeI,QAAQgB,KAAI,SAACd,GAAK,OAC9BtH,cAAC2D,GAAG,CACAhD,SAAU2G,EAAMzE,GAAK,GAErB5C,WAAW,QACXH,QAAQ,SACRF,SAAU0E,GACVrD,QAAS,kBAAMgF,EAAaqB,EAAMzE,GAAG,EACrClF,WAAY,CAAE0D,KAAM,SACpB6B,QAASN,GACL0E,EAAMO,cACN,QACF9H,SAEFC,cAAC6D,GAAI,CAACjE,SAAUgF,GAAa7E,SACzBC,cAAA,MAAAD,SAAKuH,EAAMQ,WAZVR,EAAMzE,GAcT,KAnBL6C,QAyBjB1F,cAACgI,IAAe,CAAAjI,SACX0F,EACG9F,eAAA4H,WAAA,CAAAxH,SAAA,CACIC,cAAC8E,GAAO,CACJ7D,QA1KT,WAAH,OAAS5B,EAAQyB,KAAK,IAAK,EA2KfuD,KAAM,CAAEQ,QAAS,GACjBhF,QAAS,CAAEgF,QAAS,KAExB7E,cAACgF,GAAQ,CACLqD,MAAO,CAAEtK,IAAKgB,EAAQI,MAAQ,KAC9BwB,SAAU8E,EAAc0B,OAAOjB,QAAQnG,SAEtCmH,GACGvH,eAAA4H,WAAA,CAAAxH,SAAA,CACIC,cAACkF,GAAQ,CACLmD,MAAO,CACHC,gBAAgB,oDAADvH,OAAsD6B,GACjEsE,EAAaW,cACb,QACH,QAGT7H,cAACoF,GAAQ,CAAArF,SACJmH,EAAaY,QAElB9H,cAACsF,GAAW,CAAAvF,SACPmH,EAAaa,mBAMlC,WAM5B,E,kBCxXMhF,GAAUxH,IAAOM,IAAGH,QAAAC,YAAA,8BAIpB4M,GAAahN,IAAOe,GAAER,QAAAH,YAAA,wIAMtB6H,GAAcjI,IAAOkI,GAAExH,QAAAN,YAAA,0DAIvB6M,GAAajN,IAAOkB,GAAEF,QAAAZ,YAAA,2DAKtB8M,GAAclN,IAAOmN,IAAGhM,QAAAf,YAAA,kGAOxBgN,GAAcpN,IAAOqN,GAAE5L,QAAArB,YAAA,yDAKvBkN,GAAoBtN,IAAO+H,EAACnG,QAAAxB,YAAA,yDAK5BmN,GAAiBvN,IAAO+H,EAAChG,QAAA3B,YAAA,iFA6DhBmB,I,6CAAAA,GAvDf,WACI,IAAMiM,EAAWC,cACXhI,EAAU,IAAIiI,gBAAgBF,EAASG,QAAQ/J,IAAI,WACzDhB,EACIC,qBAA4BC,EAAAC,YAAAH,EAAA,GADzBgL,EAAiB9K,EAAA,GAAE+K,EAAoB/K,EAAA,GAE9CY,qBAAU,WACN,IAAMoK,EAAiB,eAAAC,EAAAC,aAAAC,eAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAH,eAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAA1I,KAAA0I,EAAAC,MAAA,cAAAD,EAAAC,KAAA,EACIpH,GAAa1B,GAAW,IAAI,KAAD,EAA/C2I,EAAWE,EAAAE,KACjBX,EAAqBO,GAAa,wBAAAE,EAAAG,OAAA,GAAAN,EAAA,KACrC,kBAHsB,OAAAJ,EAAAW,MAAA,KAAAC,UAAA,KAIvBb,GACJ,GAAG,CAACrI,IACJ,IAAA4E,EAA4CxH,qBAA6ByH,EAAAvH,YAAAsH,EAAA,GAAlEuE,EAActE,EAAA,GAAEuE,EAAiBvE,EAAA,GAQxC,OAPA5G,qBAAU,WACN,IAAMoK,EAAiB,eAAAgB,EAAAd,aAAAC,eAAAC,MAAG,SAAAa,IAAA,IAAAC,EAAA,OAAAf,eAAAI,MAAA,SAAAY,GAAA,cAAAA,EAAArJ,KAAAqJ,EAAAV,MAAA,cAAAU,EAAAV,KAAA,EACCnH,GAAc3B,GAAW,IAAI,KAAD,EAA7CuJ,EAAQC,EAAAT,KACdK,EAAkBG,GAAU,wBAAAC,EAAAR,OAAA,GAAAM,EAAA,KAC/B,kBAHsB,OAAAD,EAAAJ,MAAA,KAAAC,UAAA,KAIvBb,GACJ,GAAG,CAACrI,IAEAhB,cAAC+C,GAAO,CAAAhD,SACHoJ,GAAqBgB,EAClBxK,eAAC4I,GAAU,CAAAxI,SAAA,CACPC,cAACwD,GAAW,CAAAzD,SAAC,iBACK,OAAjBoJ,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmB/B,QAAQgB,KAAI,SAACd,GAAK,OAClC3H,eAAC6I,GAAU,CAAAzI,SAAA,CACPC,cAACyI,GAAW,CACRgC,IAAK7H,GAAc0E,EAAMoD,aACzBC,IAAI,KAER3K,cAAC2I,GAAW,CAAA5I,SAAEuH,EAAMQ,QACpB9H,cAAC6I,GAAiB,CAAA9I,SAAEuH,EAAMQ,QAC1B9H,cAAC8I,GAAc,CAAA/I,SAAEuH,EAAMS,aAPVT,EAAMzE,GAQV,IAEjB7C,cAACwD,GAAW,CAAAzD,SAAC,cACE,OAAdoK,QAAc,IAAdA,OAAc,EAAdA,EAAgB/C,QAAQgB,KAAI,SAACwC,GAAE,OAC5BjL,eAAC6I,GAAU,CAAAzI,SAAA,CACPC,cAACyI,GAAW,CACRgC,IAAK7H,GAAcgI,EAAGF,aACtBC,IAAI,KAER3K,cAAC2I,GAAW,CAAA5I,SAAE6K,EAAGC,OACjB7K,cAAC6I,GAAiB,CAAA9I,SAAE6K,EAAGC,OACvB7K,cAAC8I,GAAc,CAAA/I,SAAE6K,EAAG7C,aAPP6C,EAAG/H,GAQP,OAIrB7C,cAAA,KAAAD,SAAG,gBAInB,EC9FMgD,GAAUxH,IAAOM,IAAGH,QAAAC,YAAA,8DAKpBqH,GAASzH,IAAOM,IAAGC,QAAAH,YAAA,yGAOnBsH,GAAS1H,IAAOM,IAAGI,QAAAN,YAAA,6PAOX,SAACO,GAAK,OAAKA,EAAMgH,OAAO,IAIhCC,GAAQ5H,IAAO6H,GAAE7G,QAAAZ,YAAA,0DAKjB0H,GAAW9H,IAAO+H,EAAC5G,QAAAf,YAAA,iDAKnB4H,GAAShI,IAAOM,IAAGmB,QAAArB,YAAA,mCAInB6H,GAAcjI,IAAOkI,GAAEtG,QAAAxB,YAAA,0DAIvB+H,GAAMnI,YAAOC,IAAOK,IAAdN,CAAkB+B,QAAA3B,YAAA,2GAOxBgI,GAAMpI,YAAOC,IAAOK,IAAdN,CAAkBqI,QAAAjI,YAAA,uVAEF,SAACO,GAAK,OAAKA,EAAMgH,OAAO,IAc9CW,GAAOtI,YAAOC,IAAOK,IAAdN,CAAkBuI,QAAAnI,YAAA,8MAEP,SAACO,GAAK,OAAKA,EAAMC,MAAM4H,MAAMlH,OAAO,IAUtDmH,GAAc,CAChBC,OAAQ,CACJ7C,EAAG8C,OAAOC,WAAa,GAE3BC,QAAS,CACLhD,EAAG,GAEPiD,KAAM,CACFjD,GAAI8C,OAAOC,WAAa,IAI1BG,GAAc,CAChB9G,OAAQ,CACJ+G,MAAO,GAEXC,MAAO,CACHD,MAAO,IACPE,GAAI,GACJ9G,WAAY,CACR+G,MAAO,GACPC,UAAW,GACXtD,KAAM,WAKZuD,GAAe,CACjBJ,MAAO,CACHK,QAAS,EACTlH,WAAY,CACR+G,MAAO,GACPC,UAAW,GACXtD,KAAM,WAIZyD,GAAUvJ,YAAOC,IAAOK,IAAdN,CAAkBwJ,QAAApJ,YAAA,8IAS5BmP,GAAQvP,YAAOC,IAAOK,IAAdN,CAAkB0J,QAAAtJ,YAAA,uMASR,SAACO,GAAK,OAAKA,EAAMC,MAAM4H,MAAMlH,OAAO,IAGtDqI,GAAW3J,IAAOM,IAAGsJ,QAAAxJ,YAAA,sHAOrByJ,GAAW7J,IAAOkI,GAAE4B,QAAA1J,YAAA,+GACb,SAACO,GAAK,OAAKA,EAAMC,MAAMQ,MAAME,OAAO,IAO3CyI,GAAc/J,IAAO+H,EAACiC,QAAA5J,YAAA,yFAIf,SAACO,GAAK,OAAKA,EAAMC,MAAMQ,MAAME,OAAO,IA+MlCkO,OA5Mf,WACI,IAAM1L,EAAUC,cACV0L,EAAatM,YAAgC,aACnDP,EAA0BC,mBAAS,GAAEC,EAAAC,YAAAH,EAAA,GAA9BuH,EAAKrH,EAAA,GAAEsH,EAAQtH,EAAA,GACtBuH,EAA8BxH,oBAAS,GAAMyH,EAAAvH,YAAAsH,EAAA,GAAtCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAEpBG,EAAgB,WAAH,OAASD,GAAW,SAAC5E,GAAI,OAAMA,CAAI,GAAE,EAClD8E,EAAe,SAACgF,GAClB5L,EAAQyB,KAAK,OAADC,OAAQkK,GACxB,EAGQlM,EAAYC,cAAZD,QAkBRoH,EAHW,CAZSC,mBACZ,CAAC,KAAM,WACP5D,IAEa4D,mBACb,CAAC,KAAM,YACP3D,IAEgB2D,mBAChB,CAAC,KAAM,eACP7D,KASc8D,EAAA/H,YAAA6H,EAAA,GAAAG,EAAAD,EAAA,GAHV6E,EAAW5E,EAAjBzF,KAA8BsK,EAAc7E,EAAzBG,UAASC,EAAAL,EAAA,GACtBQ,EAAYH,EAAlB7F,KAA+BiG,EAAeJ,EAA1BD,UAASG,EAAAP,EAAA,GACvB+E,EAAexE,EAArB/F,KAAkCwK,EAAkBzE,EAA7BH,UAavB6E,GACQ,OAAVN,QAAU,IAAVA,OAAU,EAAVA,EAAY7D,OAAO8D,QACR,OAAXC,QAAW,IAAXA,OAAW,EAAXA,EAAa9D,QAAQC,MAAK,SAACuD,GAAE,OAAKA,EAAG/H,MAAQmI,EAAW7D,OAAO8D,IAAI,KAEvE,OACIjL,cAAC+C,GAAO,CAAAhD,SACHoL,GAAkBrE,GAAmBuE,EAClCrL,cAACgD,GAAM,CAAAjD,SAAC,eAERJ,eAAA4H,WAAA,CAAAxH,SAAA,CACIJ,eAACsD,GAAM,CACHhC,QArBE,WAClB,GAAIiK,EAAa,CACb,GAAIpF,EAAS,OACbE,IACA,IAAMuF,EAAWL,EAAY9D,QAAQK,OAAS,EACxCC,EAAWC,KAAKC,MAAM2D,EA1CzB,GA0C8C,EACjD5F,GAAS,SAACxE,GAAI,OAAMA,IAASuG,EAAW,EAAIvG,EAAO,CAAC,GACxD,CACJ,EAcoB+B,QAASN,IACM,OAAXsI,QAAW,IAAXA,OAAW,EAAXA,EAAa9D,QAAQ,GAAGS,gBAAiB,IAC3C9H,SAAA,CAEFC,cAACmD,GAAK,CAAApD,SAAa,OAAXmL,QAAW,IAAXA,OAAW,EAAXA,EAAa9D,QAAQ,GAAGyD,OAChC7K,cAACqD,GAAQ,CAAAtD,SAAa,OAAXmL,QAAW,IAAXA,OAAW,EAAXA,EAAa9D,QAAQ,GAAGW,cAEvC/H,cAACuD,GAAM,CAAAxD,SACHJ,eAACqI,IAAe,CACZlI,SAAS,EACTmI,eAAgBjC,EAAcjG,SAAA,CAE9BC,cAACwD,GAAW,CAAAzD,SAAC,YACbC,cAAC0D,GAAG,CACA9D,SAAUoE,GACVlE,QAAQ,SACRD,QAAQ,UACRwE,KAAK,OACL1G,WAAY,CAAE0D,KAAM,QAAS6G,SAAU,GAAInI,SAG/B,OAAXmL,QAAW,IAAXA,OAAW,EAAXA,EAAa9D,QACTe,MAAM,GACNA,MAlFtB,EAmFkCzC,EAnFlC,EAoFkCA,EApFlC,GAsFsB0C,KAAI,SAACwC,GAAE,OACJ5K,cAAC2D,GAAG,CACAhD,SAAUiK,EAAG/H,GAAK,GAElB5C,WAAW,QACXH,QAAQ,SACRF,SAAU0E,GACVrD,QAAS,kBAAMgF,EAAa2E,EAAG/H,GAAG,EAClClF,WAAY,CAAE0D,KAAM,SACpB6B,QAASN,GACLgI,EAAG/C,cACH,QACF9H,SAEFC,cAAC6D,GAAI,CAACjE,SAAUgF,GAAa7E,SACzBC,cAAA,MAAAD,SAAK6K,EAAGC,UAZPD,EAAG/H,GAcN,KAzBT6C,GA4BT1F,cAACwD,GAAW,CAAAzD,SAAC,cACbC,cAAC0D,GAAG,CACA9D,SAAUoE,GACVlE,QAAQ,SACRD,QAAQ,UACRwE,KAAK,OACL1G,WAAY,CAAE0D,KAAM,QAAS6G,SAAU,GAAInI,SAG9B,OAAZ8G,QAAY,IAAZA,OAAY,EAAZA,EAAcO,QAAQgB,KAAI,SAACwC,GAAE,OAC1B5K,cAAC2D,GAAG,CACAhD,SAAUiK,EAAG/H,GAAK,GAElB5C,WAAW,QACXH,QAAQ,SACRF,SAAU0E,GACVrD,QAAS,kBAAMgF,EAAa2E,EAAG/H,GAAG,EAClClF,WAAY,CAAE0D,KAAM,SACpB6B,QAASN,GACLgI,EAAG/C,cACH,QACF9H,SAEFC,cAAC6D,GAAI,CAACjE,SAAUgF,GAAa7E,SACzBC,cAAA,MAAAD,SAAK6K,EAAGC,UAZPD,EAAG/H,GAcN,KAnBL6C,GAsBT1F,cAACwD,GAAW,CAAAzD,SAAC,iBACbC,cAAC0D,GAAG,CACA9D,SAAUoE,GACVlE,QAAQ,SACRD,QAAQ,UACRwE,KAAK,OACL1G,WAAY,CAAE0D,KAAM,QAAS6G,SAAU,GAAInI,SAG3B,OAAfqL,QAAe,IAAfA,OAAe,EAAfA,EAAiBhE,QAAQgB,KAAI,SAACwC,GAAE,OAC7B5K,cAAC2D,GAAG,CACAhD,SAAUiK,EAAG/H,GAAK,GAElB5C,WAAW,QACXH,QAAQ,SACRF,SAAU0E,GACVrD,QAAS,kBAAMgF,EAAa2E,EAAG/H,GAAG,EAClClF,WAAY,CAAE0D,KAAM,SACpB6B,QAASN,GACLgI,EAAG/C,cACH,QACF9H,SAEFC,cAAC6D,GAAI,CAACjE,SAAUgF,GAAa7E,SACzBC,cAAA,MAAAD,SAAK6K,EAAGC,UAZPD,EAAG/H,GAcN,KAnBL6C,QAwBjB1F,cAACgI,IAAe,CAAAjI,SACXiL,EACGrL,eAAA4H,WAAA,CAAAxH,SAAA,CACIC,cAAC8E,GAAO,CACJ7D,QA/JT,WAAH,OAAS5B,EAAQyB,KAAK,IAAK,EAgKfuD,KAAM,CAAEQ,QAAS,GACjBhF,QAAS,CAAEgF,QAAS,KAExB7E,cAAC8K,GAAK,CACFzC,MAAO,CAAEtK,IAAKgB,EAAQI,MAAQ,KAC9BwB,SAAUqK,EAAW7D,OAAO8D,KAAO,GAAGlL,SAErCuL,GACG3L,eAAA4H,WAAA,CAAAxH,SAAA,CACIC,cAACkF,GAAQ,CACLmD,MAAO,CACHC,gBAAgB,oDAADvH,OAAsD6B,GACjE0I,EAAUzD,cACV,QACH,QAGT7H,cAACoF,GAAQ,CAAArF,SACJuL,EAAUT,OAEf7K,cAACsF,GAAW,CAAAvF,SACPuL,EAAUvD,mBAM/B,WAM5B,EC3VeyD,I,GAAAA,GAnBf,WACI,OACI7L,eAAC8L,IAAM,CAAA1L,SAAA,CACHC,cAAC9B,EAAM,IACPyB,eAAC+L,IAAM,CAAA3L,SAAA,CACHC,cAAC2L,IAAK,CAACrL,KAAK,MAAKP,SACbC,cAAC4L,GAAM,MAEX5L,cAAC2L,IAAK,CAACrL,KAAK,UAASP,SACjBC,cAAClD,GAAM,MAEXkD,cAAC2L,IAAK,CAACrL,KAAM,CAAC,IAAK,oBAAoBP,SACnCC,cAACwF,GAAI,WAKzB,ECdMqG,GAAcC,YAAiBpQ,QAAAC,YAAA,w9CAuD3B,SAACO,GAAK,OAAKA,EAAMC,MAAMQ,MAAMC,MAAM,IAUvCmP,GAAS,IAAIC,cAEnBC,IAASC,OACPlM,cAACmM,IAAMC,WAAU,CAAArM,SACfC,cAACqM,IAAU,CAAAtM,SACTC,cAACsM,sBAAmB,CAACP,OAAQA,GAAOhM,SAClCJ,eAAC4M,IAAa,CAACpQ,MC9EY,CACjCC,IAAK,UACL2H,MAAO,CACLyI,SAAU,UACV5P,OAAQ,UACRC,QAAS,WAEXF,MAAO,CACLE,QAAS,OACTD,OAAQ,YDqEwBmD,SAAA,CAC1BC,cAAC6L,GAAW,IACZ7L,cAACwL,GAAG,aAKZiB,SAASC,eAAe,Q","file":"static/js/main.01966b2f.chunk.js","sourcesContent":["import { Link, useRouteMatch, useHistory } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { motion, useAnimation, useViewportScroll } from \"framer-motion\";\nimport { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nconst Nav = styled(motion.nav)`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  position: fixed;\n  width: 100%;\n  top: 0;\n  font-size: 14px;\n  padding: 20px 60px;\n  color: white;\n`;\n\nconst Col = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst Logo = styled(motion.svg)`\n  margin-right: 50px;\n  width: 95px;\n  height: 25px;\n  fill: ${(props) => props.theme.red};\n  path {\n    stroke-width: 6px;\n    stroke: white;\n  }\n`;\n\nconst Items = styled.ul`\n  display: flex;\n  align-items: center;\n`;\n\nconst Item = styled.li`\n  margin-right: 20px;\n  color: ${(props) => props.theme.white.darker};\n  transition: color 0.3s ease-in-out;\n  position: relative;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  &:hover {\n    color: ${(props) => props.theme.white.lighter};\n  }\n`;\n\nconst Search = styled.form`\n  color: white;\n  display: flex;\n  align-items: center;\n  position: relative;\n  svg {\n    height: 25px;\n  }\n`;\n\nconst Circle = styled(motion.span)`\n  position: absolute;\n  width: 5px;\n  height: 5px;\n  border-radius: 2.5px;\n  bottom: -5px;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n  background-color: ${(props) => props.theme.red};\n`;\n\nconst Input = styled(motion.input)`\n  transform-origin: right center;\n  position: absolute;\n  right: 0px;\n  padding: 5px 10px;\n  padding-left: 40px;\n  z-index: -1;\n  color: white;\n  font-size: 16px;\n  background-color: transparent;\n  border: 1px solid ${(props) => props.theme.white.lighter};\n`;\n\nconst logoVariants = {\n  normal: {\n    fillOpacity: 1,\n  },\n  active: {\n    fillOpacity: [0, 1, 0],\n    transition: {\n      repeat: Infinity,\n    },\n  },\n};\n\nconst navVariants = {\n  top: {\n    backgroundColor: \"rgba(0, 0, 0, 0)\",\n  },\n  scroll: {\n    backgroundColor: \"rgba(0, 0, 0, 1)\",\n  },\n};\n\ninterface IForm {\n  keyword: string;\n}\n\nfunction Header() {\n  const [searchOpen, setSearchOpen] = useState(false);\n  const homeMatch = useRouteMatch(\"/\");\n  const tvMatch = useRouteMatch(\"/tv\");\n  const inputAnimation = useAnimation();\n  const navAnimation = useAnimation();\n  const { scrollY } = useViewportScroll();\n  const toggleSearch = () => {\n    if (searchOpen) {\n      inputAnimation.start({\n        scaleX: 0,\n      });\n    } else {\n      inputAnimation.start({ scaleX: 1 });\n    }\n    setSearchOpen((prev) => !prev);\n  };\n  useEffect(() => {\n    scrollY.onChange(() => {\n      if (scrollY.get() > 80) {\n        navAnimation.start(\"scroll\");\n      } else {\n        navAnimation.start(\"top\");\n      }\n    });\n  }, [scrollY, navAnimation]);\n  const history = useHistory();\n  const { register, handleSubmit } = useForm<IForm>();\n  const onValid = (data: IForm) => {\n    history.push(`/search?keyword=${data.keyword}`);\n  };\n  return (\n    <Nav variants={navVariants} animate={navAnimation} initial={\"top\"}>\n      <Col>\n        <Logo\n          variants={logoVariants}\n          whileHover=\"active\"\n          animate=\"normal\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"1024\"\n          height=\"276.742\"\n          viewBox=\"0 0 1024 276.742\"\n        >\n          <motion.path d=\"M140.803 258.904c-15.404 2.705-31.079 3.516-47.294 5.676l-49.458-144.856v151.073c-15.404 1.621-29.457 3.783-44.051 5.945v-276.742h41.08l56.212 157.021v-157.021h43.511v258.904zm85.131-157.558c16.757 0 42.431-.811 57.835-.811v43.24c-19.189 0-41.619 0-57.835.811v64.322c25.405-1.621 50.809-3.785 76.482-4.596v41.617l-119.724 9.461v-255.39h119.724v43.241h-76.482v58.105zm237.284-58.104h-44.862v198.908c-14.594 0-29.188 0-43.239.539v-199.447h-44.862v-43.242h132.965l-.002 43.242zm70.266 55.132h59.187v43.24h-59.187v98.104h-42.433v-239.718h120.808v43.241h-78.375v55.133zm148.641 103.507c24.594.539 49.456 2.434 73.51 3.783v42.701c-38.646-2.434-77.293-4.863-116.75-5.676v-242.689h43.24v201.881zm109.994 49.457c13.783.812 28.377 1.623 42.43 3.242v-254.58h-42.43v251.338zm231.881-251.338l-54.863 131.615 54.863 145.127c-16.217-2.162-32.432-5.135-48.648-7.838l-31.078-79.994-31.617 73.51c-15.678-2.705-30.812-3.516-46.484-5.678l55.672-126.75-50.269-129.992h46.482l28.377 72.699 30.27-72.699h47.295z\" />\n        </Logo>\n        <Items>\n          <Item>\n            <Link to=\"/\">\n              Home {homeMatch?.isExact && <Circle layoutId=\"circle\" />}\n            </Link>\n          </Item>\n          <Item>\n            <Link to=\"/tv\">\n              Tv Shows {tvMatch && <Circle layoutId=\"circle\" />}\n            </Link>\n          </Item>\n        </Items>\n      </Col>\n      <Col>\n        <Search onSubmit={handleSubmit(onValid)}>\n          <motion.svg\n            onClick={toggleSearch}\n            animate={{ x: searchOpen ? -185 : 0 }}\n            transition={{ type: \"linear\" }}\n            fill=\"currentColor\"\n            viewBox=\"0 0 20 20\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              fillRule=\"evenodd\"\n              d=\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\"\n              clipRule=\"evenodd\"\n            ></path>\n          </motion.svg>\n          <Input\n            {...register(\"keyword\", { required: true, minLength: 2 })}\n            animate={inputAnimation}\n            initial={{ scaleX: 0 }}\n            transition={{ type: \"linear\" }}\n            placeholder=\"Search for movie or tv show...\"\n          />\n        </Search>\n      </Col>\n    </Nav>\n  );\n}\n\nexport default Header;\n","const API_KEY = \"563446817a04da527b7bf1f0171a5d0a\";\nconst BASE_PATH = \"https://api.themoviedb.org/3\";\n\nexport interface IMovie {\n    id: number;\n    backdrop_path: string;\n    poster_path: string;\n    title: string;\n    overview: string;\n}\n\nexport interface IGetMoviesResult {\n    dates: {\n        maximum: string;\n        minimum: string;\n    };\n    page: number;\n    results: IMovie[];\n    total_pages: number;\n    total_results: number;\n}\n\ninterface ITvShow {\n    id: number;\n    backdrop_path: string;\n    poster_path: string;\n    name: string;\n    overview: string;\n}\n\nexport interface IGetTvShowsResult {\n    dates: {\n        maximum: string;\n        minimum: string;\n    };\n    page: number;\n    results: ITvShow[];\n    total_pages: number;\n    total_results: number;\n}\n\nexport function getMovies() {\n    return fetch(`${BASE_PATH}/movie/now_playing?api_key=${API_KEY}`).then(\n        (response) => response.json()\n    );\n}\nexport const getLatestMovies = () => {\n    return fetch(`${BASE_PATH}/movie/latest?api_key=${API_KEY}`).then(\n        (response) => response.json()\n    );\n};\n\nexport const getTopRatedMovies = () => {\n    return fetch(`${BASE_PATH}/movie/top_rated?api_key=${API_KEY}`).then(\n        (response) => response.json()\n    );\n};\n\nexport const getUpcomingMovies = () => {\n    return fetch(`${BASE_PATH}/movie/upcoming?api_key=${API_KEY}`).then(\n        (response) => response.json()\n    );\n};\n\nexport const getLatestTvShows = () => {\n    return fetch(`${BASE_PATH}/tv/latest?api_key=${API_KEY}`).then((response) =>\n        response.json()\n    );\n};\n\nexport const getAiringTodayTvShows = () => {\n    return fetch(`${BASE_PATH}/tv/airing_today?api_key=${API_KEY}`).then(\n        (response) => response.json()\n    );\n};\n\nexport const getPopularTvShows = () => {\n    return fetch(`${BASE_PATH}/tv/popular?api_key=${API_KEY}`).then(\n        (response) => response.json()\n    );\n};\n\nexport const getTopRatedTvShows = () => {\n    return fetch(`${BASE_PATH}/tv/top_rated?api_key=${API_KEY}`).then(\n        (response) => response.json()\n    );\n};\n\nexport const searchMovies = (keyword: string) => {\n    return fetch(\n        `${BASE_PATH}/search/movie?api_key=${API_KEY}&query=${keyword}`\n    ).then((response) => response.json());\n};\n\nexport const searchTvShows = (keyword: string) => {\n    return fetch(\n        `${BASE_PATH}/search/tv?api_key=${API_KEY}&query=${keyword}`\n    ).then((response) => response.json());\n};\n","export function makeImagePath(id: string, format?: string) {\n  return `https://image.tmdb.org/t/p/${format ? format : \"original\"}/${id}`;\n}\n","import { useQuery } from \"react-query\";\nimport styled from \"styled-components\";\nimport { motion, AnimatePresence, useViewportScroll } from \"framer-motion\";\nimport {\n    getLatestMovies,\n    getMovies,\n    getTopRatedMovies,\n    getUpcomingMovies,\n    IGetMoviesResult,\n} from \"../api\";\nimport { makeImagePath } from \"../utils\";\nimport { useState } from \"react\";\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\n\nconst Wrapper = styled.div`\n    background: black;\n    padding-bottom: 200px;\n`;\n\nconst Loader = styled.div`\n    height: 20vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst Banner = styled.div<{ bgPhoto: string }>`\n    height: 100vh;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    padding: 60px;\n    background-image: linear-gradient(rgba(0, 0, 0, 0), rgba(0, 0, 0, 1)),\n        url(${(props) => props.bgPhoto});\n    background-size: cover;\n`;\n\nconst Title = styled.h2`\n    font-size: 68px;\n    margin-bottom: 20px; ;\n`;\n\nconst Overview = styled.p`\n    font-size: 30px;\n    width: 50%;\n`;\n\nconst Slider = styled.div`\n    position: relative;\n`;\n\nconst SliderTitle = styled.h3`\n    font-size: 46px;\n    margin-bottom: 20px;\n`;\nconst Row = styled(motion.div)`\n    display: grid;\n    gap: 5px;\n    grid-template-columns: repeat(6, 1fr);\n    width: 100%;\n`;\n\nconst Box = styled(motion.div)<{ bgPhoto: string }>`\n    background-color: white;\n    background-image: url(${(props) => props.bgPhoto});\n    background-size: cover;\n    background-position: center center;\n    height: 200px;\n    font-size: 66px;\n    cursor: pointer;\n    &:first-child {\n        transform-origin: center left;\n    }\n    &:last-child {\n        transform-origin: center right;\n    }\n`;\n\nconst Info = styled(motion.div)`\n    padding: 10px;\n    background-color: ${(props) => props.theme.black.lighter};\n    opacity: 0;\n    position: absolute;\n    width: 100%;\n    bottom: 0;\n    h4 {\n        text-align: center;\n        font-size: 18px;\n    }\n`;\n\nconst rowVariants = {\n    hidden: {\n        x: window.outerWidth + 5,\n    },\n    visible: {\n        x: 0,\n    },\n    exit: {\n        x: -window.outerWidth - 5,\n    },\n};\n\nconst boxVariants = {\n    normal: {\n        scale: 1,\n    },\n    hover: {\n        scale: 1.3,\n        y: -80,\n        transition: {\n            delay: 0.5,\n            duaration: 0.1,\n            type: \"tween\",\n        },\n    },\n};\n\nconst infoVariants = {\n    hover: {\n        opacity: 1,\n        transition: {\n            delay: 0.5,\n            duaration: 0.1,\n            type: \"tween\",\n        },\n    },\n};\nconst Overlay = styled(motion.div)`\n    position: fixed;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    opacity: 0;\n`;\n\nconst BigMovie = styled(motion.div)`\n    position: absolute;\n    width: 40vw;\n    height: 80vh;\n    left: 0;\n    right: 0;\n    margin: 0 auto;\n    border-radius: 15px;\n    overflow: hidden;\n    background-color: ${(props) => props.theme.black.lighter};\n`;\n\nconst BigCover = styled.div`\n    width: 100%;\n    background-size: cover;\n    background-position: center center;\n    height: 400px;\n`;\n\nconst BigTitle = styled.h3`\n    color: ${(props) => props.theme.white.lighter};\n    padding: 20px;\n    font-size: 46px;\n    position: relative;\n    top: -80px;\n`;\n\nconst BigOverview = styled.p`\n    padding: 20px;\n    position: relative;\n    top: -80px;\n    color: ${(props) => props.theme.white.lighter};\n`;\nconst offset = 6;\nfunction Home() {\n    const history = useHistory();\n    const bigMovieMatch = useRouteMatch<{ movieId: string }>(\n        \"/movies/:movieId\"\n    );\n    const [index, setIndex] = useState(0);\n    const [leaving, setLeaving] = useState(false);\n\n    const toggleLeaving = () => setLeaving((prev) => !prev);\n    const onBoxClicked = (movieId: number) => {\n        history.push(`/movies/${movieId}`);\n    };\n    const onOverlayClick = () => history.push(\"/\");\n\n    const { scrollY } = useViewportScroll();\n    const useMultipleQuery = () => {\n        const nowPlaying = useQuery<IGetMoviesResult>(\n            [\"movies\", \"nowPlaying\"],\n            getMovies\n        );\n        const latest = useQuery<IGetMoviesResult>(\n            [\"movies\", \"latest\"],\n            getLatestMovies\n        );\n        const topRated = useQuery<IGetMoviesResult>(\n            [\"movies\", \"topRated\"],\n            getTopRatedMovies\n        );\n        const upComming = useQuery<IGetMoviesResult>(\n            [\"movies\", \"upComming\"],\n            getUpcomingMovies\n        );\n        return [nowPlaying, latest, topRated, upComming];\n    };\n    const [\n        { data: nowPlayingData, isLoading: nowPlayingLoading },\n        { data: latestData, isLoading: latestLoading },\n        { data: topRatedData, isLoading: topRatedLoading },\n        { data: upCommingData, isLoading: upCommingLoading },\n    ] = useMultipleQuery();\n\n    const incraseIndex = () => {\n        if (nowPlayingData) {\n            if (leaving) return;\n            toggleLeaving();\n            const totalMovies = nowPlayingData.results.length - 1;\n            const maxIndex = Math.floor(totalMovies / offset) - 1;\n            setIndex((prev) => (prev === maxIndex ? 0 : prev + 1));\n        }\n    };\n    const clickedMovie =\n        bigMovieMatch?.params.movieId &&\n        nowPlayingData?.results.find(\n            (movie) => movie.id === +bigMovieMatch.params.movieId\n        );\n    return (\n        <Wrapper>\n            {nowPlayingLoading ||\n            latestLoading ||\n            topRatedLoading ||\n            upCommingLoading ? (\n                <Loader>Loading...</Loader>\n            ) : (\n                <>\n                    <Banner\n                        onClick={incraseIndex}\n                        bgPhoto={makeImagePath(\n                            nowPlayingData?.results[0].backdrop_path || \"\"\n                        )}\n                    >\n                        <Title>{nowPlayingData?.results[0].title}</Title>\n                        <Overview>\n                            {nowPlayingData?.results[0].overview}\n                        </Overview>\n                    </Banner>\n                    <Slider>\n                        <AnimatePresence\n                            initial={false}\n                            onExitComplete={toggleLeaving}\n                        >\n                            <SliderTitle>Now Playing</SliderTitle>\n                            <Row\n                                variants={rowVariants}\n                                initial=\"hidden\"\n                                animate=\"visible\"\n                                exit=\"exit\"\n                                transition={{ type: \"tween\", duration: 1 }}\n                                key={index}\n                            >\n                                {nowPlayingData?.results\n                                    .slice(1)\n                                    .slice(\n                                        offset * index,\n                                        offset * index + offset\n                                    )\n                                    .map((movie) => (\n                                        <Box\n                                            layoutId={movie.id + \"\"}\n                                            key={movie.id}\n                                            whileHover=\"hover\"\n                                            initial=\"normal\"\n                                            variants={boxVariants}\n                                            onClick={() =>\n                                                onBoxClicked(movie.id)\n                                            }\n                                            transition={{ type: \"tween\" }}\n                                            bgPhoto={makeImagePath(\n                                                movie.backdrop_path,\n                                                \"w500\"\n                                            )}\n                                        >\n                                            <Info variants={infoVariants}>\n                                                <h4>{movie.title}</h4>\n                                            </Info>\n                                        </Box>\n                                    ))}\n                            </Row>\n                            <SliderTitle>Top Rated</SliderTitle>\n                            <Row\n                                variants={rowVariants}\n                                initial=\"hidden\"\n                                animate=\"visible\"\n                                exit=\"exit\"\n                                transition={{ type: \"tween\", duration: 1 }}\n                                key={index}\n                            >\n                                {topRatedData?.results.map((movie) => (\n                                    <Box\n                                        layoutId={movie.id + \"\"}\n                                        key={movie.id}\n                                        whileHover=\"hover\"\n                                        initial=\"normal\"\n                                        variants={boxVariants}\n                                        onClick={() => onBoxClicked(movie.id)}\n                                        transition={{ type: \"tween\" }}\n                                        bgPhoto={makeImagePath(\n                                            movie.backdrop_path,\n                                            \"w500\"\n                                        )}\n                                    >\n                                        <Info variants={infoVariants}>\n                                            <h4>{movie.title}</h4>\n                                        </Info>\n                                    </Box>\n                                ))}\n                            </Row>\n                            <SliderTitle>Up Comming</SliderTitle>\n                            <Row\n                                variants={rowVariants}\n                                initial=\"hidden\"\n                                animate=\"visible\"\n                                exit=\"exit\"\n                                transition={{ type: \"tween\", duration: 1 }}\n                                key={index}\n                            >\n                                {upCommingData?.results.map((movie) => (\n                                    <Box\n                                        layoutId={movie.id + \"\"}\n                                        key={movie.id}\n                                        whileHover=\"hover\"\n                                        initial=\"normal\"\n                                        variants={boxVariants}\n                                        onClick={() => onBoxClicked(movie.id)}\n                                        transition={{ type: \"tween\" }}\n                                        bgPhoto={makeImagePath(\n                                            movie.backdrop_path,\n                                            \"w500\"\n                                        )}\n                                    >\n                                        <Info variants={infoVariants}>\n                                            <h4>{movie.title}</h4>\n                                        </Info>\n                                    </Box>\n                                ))}\n                            </Row>\n                        </AnimatePresence>\n                    </Slider>\n\n                    <AnimatePresence>\n                        {bigMovieMatch ? (\n                            <>\n                                <Overlay\n                                    onClick={onOverlayClick}\n                                    exit={{ opacity: 0 }}\n                                    animate={{ opacity: 1 }}\n                                />\n                                <BigMovie\n                                    style={{ top: scrollY.get() + 100 }}\n                                    layoutId={bigMovieMatch.params.movieId}\n                                >\n                                    {clickedMovie && (\n                                        <>\n                                            <BigCover\n                                                style={{\n                                                    backgroundImage: `linear-gradient(to top, black, transparent), url(${makeImagePath(\n                                                        clickedMovie.backdrop_path,\n                                                        \"w500\"\n                                                    )})`,\n                                                }}\n                                            />\n                                            <BigTitle>\n                                                {clickedMovie.title}\n                                            </BigTitle>\n                                            <BigOverview>\n                                                {clickedMovie.overview}\n                                            </BigOverview>\n                                        </>\n                                    )}\n                                </BigMovie>\n                            </>\n                        ) : null}\n                    </AnimatePresence>\n                </>\n            )}\n        </Wrapper>\n    );\n}\nexport default Home;\n","import { useLocation } from \"react-router\";\nimport { useEffect, useState } from \"react\";\nimport {\n    searchMovies,\n    IGetMoviesResult,\n    searchTvShows,\n    IGetTvShowsResult,\n} from \"../api\";\nimport { makeImagePath } from \"../utils\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n    padding: 20px;\n`;\n\nconst ResultList = styled.ul`\n    list-style: none;\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n    gap: 20px;\n`;\nconst SliderTitle = styled.h3`\n    font-size: 46px;\n    margin-bottom: 20px;\n`;\nconst ResultItem = styled.li`\n    display: flex;\n    flex-direction: column;\n`;\n\nconst ResultImage = styled.img`\n    width: 100%;\n    height: 300px;\n    object-fit: cover;\n    margin-bottom: 10px;\n`;\n\nconst ResultTitle = styled.h4`\n    font-size: 20px;\n    margin-bottom: 5px;\n`;\n\nconst ResultReleaseDate = styled.p`\n    font-size: 16px;\n    margin-bottom: 5px;\n`;\n\nconst ResultOverview = styled.p`\n    font-size: 16px;\n    line-height: 1.4;\n    margin-bottom: 10px;\n`;\n\nfunction Search() {\n    const location = useLocation();\n    const keyword = new URLSearchParams(location.search).get(\"keyword\");\n    const [movieSearchResult, setMovieSearchResult] =\n        useState<IGetMoviesResult>();\n    useEffect(() => {\n        const fetchSearchResult = async () => {\n            const movieResult = await searchMovies(keyword || \"\");\n            setMovieSearchResult(movieResult);\n        };\n        fetchSearchResult();\n    }, [keyword]);\n    const [tvSearchResult, setTvSearchResult] = useState<IGetTvShowsResult>();\n    useEffect(() => {\n        const fetchSearchResult = async () => {\n            const tvResult = await searchTvShows(keyword || \"\");\n            setTvSearchResult(tvResult);\n        };\n        fetchSearchResult();\n    }, [keyword]);\n    return (\n        <Wrapper>\n            {movieSearchResult || tvSearchResult ? (\n                <ResultList>\n                    <SliderTitle>Movie Result</SliderTitle>\n                    {movieSearchResult?.results.map((movie) => (\n                        <ResultItem key={movie.id}>\n                            <ResultImage\n                                src={makeImagePath(movie.poster_path)}\n                                alt=\"\"\n                            />\n                            <ResultTitle>{movie.title}</ResultTitle>\n                            <ResultReleaseDate>{movie.title}</ResultReleaseDate>\n                            <ResultOverview>{movie.overview}</ResultOverview>\n                        </ResultItem>\n                    ))}\n                    <SliderTitle>TV Result</SliderTitle>\n                    {tvSearchResult?.results.map((tv) => (\n                        <ResultItem key={tv.id}>\n                            <ResultImage\n                                src={makeImagePath(tv.poster_path)}\n                                alt=\"\"\n                            />\n                            <ResultTitle>{tv.name}</ResultTitle>\n                            <ResultReleaseDate>{tv.name}</ResultReleaseDate>\n                            <ResultOverview>{tv.overview}</ResultOverview>\n                        </ResultItem>\n                    ))}\n                </ResultList>\n            ) : (\n                <p>No Results</p>\n            )}\n        </Wrapper>\n    );\n}\nexport default Search;\n","import { useQuery } from \"react-query\";\nimport styled from \"styled-components\";\nimport { motion, AnimatePresence, useViewportScroll } from \"framer-motion\";\nimport {\n    getAiringTodayTvShows,\n    getPopularTvShows,\n    getTopRatedTvShows,\n    IGetTvShowsResult,\n} from \"../api\";\nimport { makeImagePath } from \"../utils\";\nimport { useState } from \"react\";\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\n\nconst Wrapper = styled.div`\n    background: black;\n    padding-bottom: 200px;\n`;\n\nconst Loader = styled.div`\n    height: 20vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst Banner = styled.div<{ bgPhoto: string }>`\n    height: 100vh;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    padding: 60px;\n    background-image: linear-gradient(rgba(0, 0, 0, 0), rgba(0, 0, 0, 1)),\n        url(${(props) => props.bgPhoto});\n    background-size: cover;\n`;\n\nconst Title = styled.h2`\n    font-size: 68px;\n    margin-bottom: 20px;\n`;\n\nconst Overview = styled.p`\n    font-size: 30px;\n    width: 50%;\n`;\n\nconst Slider = styled.div`\n    position: relative;\n`;\n\nconst SliderTitle = styled.h3`\n    font-size: 46px;\n    margin-bottom: 20px;\n`;\nconst Row = styled(motion.div)`\n    display: grid;\n    gap: 5px;\n    grid-template-columns: repeat(6, 1fr);\n    width: 100%;\n`;\n\nconst Box = styled(motion.div)<{ bgPhoto: string }>`\n    background-color: white;\n    background-image: url(${(props) => props.bgPhoto});\n    background-size: cover;\n    background-position: center center;\n    height: 200px;\n    font-size: 66px;\n    cursor: pointer;\n    &:first-child {\n        transform-origin: center left;\n    }\n    &:last-child {\n        transform-origin: center right;\n    }\n`;\n\nconst Info = styled(motion.div)`\n    padding: 10px;\n    background-color: ${(props) => props.theme.black.lighter};\n    opacity: 0;\n    position: absolute;\n    width: 100%;\n    bottom: 0;\n    h4 {\n        text-align: center;\n        font-size: 18px;\n    }\n`;\nconst rowVariants = {\n    hidden: {\n        x: window.outerWidth + 5,\n    },\n    visible: {\n        x: 0,\n    },\n    exit: {\n        x: -window.outerWidth - 5,\n    },\n};\n\nconst boxVariants = {\n    normal: {\n        scale: 1,\n    },\n    hover: {\n        scale: 1.3,\n        y: -80,\n        transition: {\n            delay: 0.5,\n            duaration: 0.1,\n            type: \"tween\",\n        },\n    },\n};\n\nconst infoVariants = {\n    hover: {\n        opacity: 1,\n        transition: {\n            delay: 0.5,\n            duaration: 0.1,\n            type: \"tween\",\n        },\n    },\n};\nconst Overlay = styled(motion.div)`\n    position: fixed;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    opacity: 0;\n`;\n\nconst BigTv = styled(motion.div)`\n    position: absolute;\n    width: 40vw;\n    height: 80vh;\n    left: 0;\n    right: 0;\n    margin: 0 auto;\n    border-radius: 15px;\n    overflow: hidden;\n    background-color: ${(props) => props.theme.black.lighter};\n`;\n\nconst BigCover = styled.div`\n    width: 100%;\n    background-size: cover;\n    background-position: center center;\n    height: 400px;\n`;\n\nconst BigTitle = styled.h3`\n    color: ${(props) => props.theme.white.lighter};\n    padding: 20px;\n    font-size: 46px;\n    position: relative;\n    top: -80px;\n`;\n\nconst BigOverview = styled.p`\n    padding: 20px;\n    position: relative;\n    top: -80px;\n    color: ${(props) => props.theme.white.lighter};\n`;\nconst offset = 6;\nfunction TVShow() {\n    const history = useHistory();\n    const bigTVMatch = useRouteMatch<{ tvId: string }>(\"/tv/:tvId\");\n    const [index, setIndex] = useState(0);\n    const [leaving, setLeaving] = useState(false);\n\n    const toggleLeaving = () => setLeaving((prev) => !prev);\n    const onBoxClicked = (tvId: number) => {\n        history.push(`/tv/${tvId}`);\n    };\n    const onOverlayClick = () => history.push(\"/\");\n\n    const { scrollY } = useViewportScroll();\n\n    const useMultipleQuery = () => {\n        const popular = useQuery<IGetTvShowsResult>(\n            [\"tv\", \"popular\"],\n            getPopularTvShows\n        );\n        const topRated = useQuery<IGetTvShowsResult>(\n            [\"tv\", \"topRated\"],\n            getTopRatedTvShows\n        );\n        const airingToday = useQuery<IGetTvShowsResult>(\n            [\"tv\", \"airingToday\"],\n            getAiringTodayTvShows\n        );\n        return [popular, topRated, airingToday];\n    };\n\n    const [\n        { data: popularData, isLoading: popularLoading },\n        { data: topRatedData, isLoading: topRatedLoading },\n        { data: airingTodayData, isLoading: airingTodayLoading },\n    ] = useMultipleQuery();\n\n    const increaseIndex = () => {\n        if (popularData) {\n            if (leaving) return;\n            toggleLeaving();\n            const totalTVs = popularData.results.length - 1;\n            const maxIndex = Math.floor(totalTVs / offset) - 1;\n            setIndex((prev) => (prev === maxIndex ? 0 : prev + 1));\n        }\n    };\n\n    const clickedTV =\n        bigTVMatch?.params.tvId &&\n        popularData?.results.find((tv) => tv.id === +bigTVMatch.params.tvId);\n\n    return (\n        <Wrapper>\n            {popularLoading || topRatedLoading || airingTodayLoading ? (\n                <Loader>Loading...</Loader>\n            ) : (\n                <>\n                    <Banner\n                        onClick={increaseIndex}\n                        bgPhoto={makeImagePath(\n                            popularData?.results[0].backdrop_path || \"\"\n                        )}\n                    >\n                        <Title>{popularData?.results[0].name}</Title>\n                        <Overview>{popularData?.results[0].overview}</Overview>\n                    </Banner>\n                    <Slider>\n                        <AnimatePresence\n                            initial={false}\n                            onExitComplete={toggleLeaving}\n                        >\n                            <SliderTitle>Popular</SliderTitle>\n                            <Row\n                                variants={rowVariants}\n                                initial=\"hidden\"\n                                animate=\"visible\"\n                                exit=\"exit\"\n                                transition={{ type: \"tween\", duration: 1 }}\n                                key={index}\n                            >\n                                {popularData?.results\n                                    .slice(1)\n                                    .slice(\n                                        offset * index,\n                                        offset * index + offset\n                                    )\n                                    .map((tv) => (\n                                        <Box\n                                            layoutId={tv.id + \"\"}\n                                            key={tv.id}\n                                            whileHover=\"hover\"\n                                            initial=\"normal\"\n                                            variants={boxVariants}\n                                            onClick={() => onBoxClicked(tv.id)}\n                                            transition={{ type: \"tween\" }}\n                                            bgPhoto={makeImagePath(\n                                                tv.backdrop_path,\n                                                \"w500\"\n                                            )}\n                                        >\n                                            <Info variants={infoVariants}>\n                                                <h4>{tv.name}</h4>\n                                            </Info>\n                                        </Box>\n                                    ))}\n                            </Row>\n                            <SliderTitle>Top Rated</SliderTitle>\n                            <Row\n                                variants={rowVariants}\n                                initial=\"hidden\"\n                                animate=\"visible\"\n                                exit=\"exit\"\n                                transition={{ type: \"tween\", duration: 1 }}\n                                key={index}\n                            >\n                                {topRatedData?.results.map((tv) => (\n                                    <Box\n                                        layoutId={tv.id + \"\"}\n                                        key={tv.id}\n                                        whileHover=\"hover\"\n                                        initial=\"normal\"\n                                        variants={boxVariants}\n                                        onClick={() => onBoxClicked(tv.id)}\n                                        transition={{ type: \"tween\" }}\n                                        bgPhoto={makeImagePath(\n                                            tv.backdrop_path,\n                                            \"w500\"\n                                        )}\n                                    >\n                                        <Info variants={infoVariants}>\n                                            <h4>{tv.name}</h4>\n                                        </Info>\n                                    </Box>\n                                ))}\n                            </Row>\n                            <SliderTitle>Airing Today</SliderTitle>\n                            <Row\n                                variants={rowVariants}\n                                initial=\"hidden\"\n                                animate=\"visible\"\n                                exit=\"exit\"\n                                transition={{ type: \"tween\", duration: 1 }}\n                                key={index}\n                            >\n                                {airingTodayData?.results.map((tv) => (\n                                    <Box\n                                        layoutId={tv.id + \"\"}\n                                        key={tv.id}\n                                        whileHover=\"hover\"\n                                        initial=\"normal\"\n                                        variants={boxVariants}\n                                        onClick={() => onBoxClicked(tv.id)}\n                                        transition={{ type: \"tween\" }}\n                                        bgPhoto={makeImagePath(\n                                            tv.backdrop_path,\n                                            \"w500\"\n                                        )}\n                                    >\n                                        <Info variants={infoVariants}>\n                                            <h4>{tv.name}</h4>\n                                        </Info>\n                                    </Box>\n                                ))}\n                            </Row>\n                        </AnimatePresence>\n                    </Slider>\n                    <AnimatePresence>\n                        {bigTVMatch ? (\n                            <>\n                                <Overlay\n                                    onClick={onOverlayClick}\n                                    exit={{ opacity: 0 }}\n                                    animate={{ opacity: 1 }}\n                                />\n                                <BigTv\n                                    style={{ top: scrollY.get() + 100 }}\n                                    layoutId={bigTVMatch.params.tvId + \"\"}\n                                >\n                                    {clickedTV && (\n                                        <>\n                                            <BigCover\n                                                style={{\n                                                    backgroundImage: `linear-gradient(to top, black, transparent), url(${makeImagePath(\n                                                        clickedTV.backdrop_path,\n                                                        \"w500\"\n                                                    )})`,\n                                                }}\n                                            />\n                                            <BigTitle>\n                                                {clickedTV.name}\n                                            </BigTitle>\n                                            <BigOverview>\n                                                {clickedTV.overview}\n                                            </BigOverview>\n                                        </>\n                                    )}\n                                </BigTv>\n                            </>\n                        ) : null}\n                    </AnimatePresence>\n                </>\n            )}\n        </Wrapper>\n    );\n}\nexport default TVShow;\n","import { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Header from \"./Components/Header\";\nimport Home from \"./Routes/Home\";\nimport Search from \"./Routes/Search\";\nimport TvShow from \"./Routes/TvShow\";\n\nfunction App() {\n    return (\n        <Router>\n            <Header />\n            <Switch>\n                <Route path=\"/tv\">\n                    <TvShow />\n                </Route>\n                <Route path=\"/search\">\n                    <Search />\n                </Route>\n                <Route path={[\"/\", \"/movies/:movieId\"]}>\n                    <Home />\n                </Route>\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { createGlobalStyle } from \"styled-components\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { theme } from \"./theme\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  color:${(props) => props.theme.white.darker};\n  line-height: 1.2;\n  background-color: black;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n`;\n\nconst client = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <QueryClientProvider client={client}>\n        <ThemeProvider theme={theme}>\n          <GlobalStyle />\n          <App />\n        </ThemeProvider>\n      </QueryClientProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { DefaultTheme } from \"styled-components\";\n\nexport const theme: DefaultTheme = {\n  red: \"#E51013\",\n  black: {\n    veryDark: \"#141414\",\n    darker: \"#181818\",\n    lighter: \"#2F2F2F\",\n  },\n  white: {\n    lighter: \"#fff\",\n    darker: \"#e5e5e5\",\n  },\n};\n"],"sourceRoot":""}